generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?   @db.VarChar(255)

  accounts Account[]
  sessions Session[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Membership Membership[]
  TimeEntry  TimeEntry[]
}

model Workspace {
  id          String       @id @default(cuid())
  name        String
  memberships Membership[]
  projects    Project[]
  rates       Rate[]
  invoices    Invoice[]
  createdAt   DateTime     @default(now())
  TimeEntry   TimeEntry[]
}

model Membership {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        Role
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Project {
  id          String      @id @default(cuid())
  workspaceId String
  name        String
  isArchived  Boolean     @default(false)
  tasks       Task[]
  timeEntries TimeEntry[]
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime    @default(now())
}

model Task {
  id        String      @id @default(cuid())
  projectId String
  name      String
  project   Project     @relation(fields: [projectId], references: [id])
  createdAt DateTime    @default(now())
  TimeEntry TimeEntry[]

  @@index([projectId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  projectId   String?
  taskId      String?
  note        String?
  startTime   DateTime
  endTime     DateTime?
  durationSec Int?
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])

  @@index([userId, workspaceId, endTime])
}

model Rate {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String?
  projectId   String?
  hourlyCents Int
  currency    String
  priority    Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId, userId, projectId, priority])
}

model Invoice {
  id          String        @id @default(cuid())
  workspaceId String
  clientName  String
  periodFrom  DateTime
  periodTo    DateTime
  amountCents Int
  currency    String
  status      InvoiceStatus @default(DRAFT)
  fileUrl     String?
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime      @default(now())
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
